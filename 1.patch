diff --git a/build/install-build-deps.py b/build/install-build-deps.py
index 9805182573..68aa7b63f4 100755
--- a/build/install-build-deps.py
+++ b/build/install-build-deps.py
@@ -186,7 +186,7 @@ def check_root():
 def apt_update(options):
   if options.lib32 or options.nacl:
     subprocess.check_call(["sudo", "dpkg", "--add-architecture", "i386"])
-  subprocess.check_call(["sudo", "apt-get", "update"])
+  subprocess.check_call(["apt-get", "update"])
 
 
 # Packages needed for development
@@ -845,7 +845,7 @@ def install_packages(options):
     packages = find_missing_packages(options)
     if packages:
       quiet = ["-qq", "--assume-yes"] if options.no_prompt else []
-      subprocess.check_call(["sudo", "apt-get", "install"] + quiet + packages)
+      subprocess.check_call(["apt-get", "install"] + quiet + packages)
       print(file=sys.stderr)
     else:
       print("No missing packages, and the packages are up to date.",
@@ -908,18 +908,18 @@ def install_locales():
     old_locale_gen = open(LOCALE_GEN).read()
     for locale in CHROMIUM_LOCALES:
       subprocess.check_call(
-          ["sudo", "sed", "-i",
+          ["sed", "-i",
            "s/^# %s/%s/" % (locale, locale), LOCALE_GEN])
 
     # Regenerating locales can take a while, so only do it if we need to.
     locale_gen = open(LOCALE_GEN).read()
     if locale_gen != old_locale_gen:
-      subprocess.check_call(["sudo", "locale-gen"])
+      subprocess.check_call(["locale-gen"])
     else:
       print("Locales already up-to-date.", file=sys.stderr)
   else:
     for locale in CHROMIUM_LOCALES:
-      subprocess.check_call(["sudo", "locale-gen", locale])
+      subprocess.check_call([ "locale-gen", locale])
 
 
 def main():
diff --git a/build/linux/sysroot_scripts/reversion_glibc.py b/build/linux/sysroot_scripts/reversion_glibc.py
old mode 100644
new mode 100755
index b7e18eff03..2f5aabfbda
--- a/build/linux/sysroot_scripts/reversion_glibc.py
+++ b/build/linux/sysroot_scripts/reversion_glibc.py
@@ -1,7 +1,6 @@
 # Copyright 2021 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
-
 """Rewrite incompatible default symbols in glibc.
 """
 
diff --git a/components/cronet/cronet_context.cc b/components/cronet/cronet_context.cc
index 4f0ebd8125..149466a56f 100644
--- a/components/cronet/cronet_context.cc
+++ b/components/cronet/cronet_context.cc
@@ -63,6 +63,9 @@
 #include "net/url_request/url_request_context_builder.h"
 #include "net/url_request/url_request_context_getter.h"
 #include "net/url_request/url_request_interceptor.h"
+#include "net/proxy_resolution/proxy_config_service.h"
+#include "net/proxy_resolution/proxy_config.h"
+
 
 #if BUILDFLAG(ENABLE_REPORTING)
 #include "net/network_error_logging/network_error_logging_service.h"
@@ -204,6 +207,7 @@ CronetContext::CronetContext(
       default_load_flags_(
           net::LOAD_NORMAL |
           (context_config->load_disable_cache ? net::LOAD_DISABLE_CACHE : 0)),
+      proxy_rules_(context_config->proxy_rules),
       network_tasks_(
           new NetworkTasks(std::move(context_config), std::move(callback))),
       network_task_runner_(network_task_runner) {
@@ -249,12 +253,41 @@ CronetContext::NetworkTasks::~NetworkTasks() {
     net::NetworkChangeNotifier::RemoveNetworkObserver(this);
 }
 
+
+class ProxyConfigServiceCustom : public net::ProxyConfigService {
+ public:
+  ProxyConfigServiceCustom(const std::string& proxy_rules):proxy_rules_(proxy_rules) {}
+  void AddObserver(Observer* observer) override {}
+  void RemoveObserver(Observer* observer) override {}
+  ConfigAvailability GetLatestProxyConfig(
+      net::ProxyConfigWithAnnotation* config) override {
+
+    auto proxy_config = net::ProxyConfig();
+    proxy_config.proxy_rules().ParseFromString(proxy_rules_);
+    auto annotation = net::DefineNetworkTrafficAnnotation("test", "test");
+    *config = net::ProxyConfigWithAnnotation(proxy_config, annotation);
+    return CONFIG_VALID;
+  }
+
+  private:
+    const std::string proxy_rules_;
+};
+
+
 void CronetContext::InitRequestContextOnInitThread() {
   DCHECK(OnInitThread());
   // Cannot create this inside Initialize because Android requires this to be
   // created on the JNI thread.
-  auto proxy_config_service =
+
+  std::unique_ptr<net::ProxyConfigService> proxy_config_service;
+  if (!proxy_rules_.empty()) {
+    proxy_config_service =
+      std::make_unique<ProxyConfigServiceCustom>(proxy_rules_);
+  } else {
+    proxy_config_service =
       cronet::CreateProxyConfigService(GetNetworkTaskRunner());
+  }
+
   g_net_log.Get().EnsureInitializedOnInitThread();
   GetNetworkTaskRunner()->PostTask(
       FROM_HERE,
diff --git a/components/cronet/cronet_context.h b/components/cronet/cronet_context.h
index b5163c84b0..a19b25964f 100644
--- a/components/cronet/cronet_context.h
+++ b/components/cronet/cronet_context.h
@@ -379,6 +379,8 @@ class CronetContext {
   // File thread should be destroyed last.
   std::unique_ptr<base::Thread> file_thread_;
 
+  const std::string proxy_rules_;
+
   // |network_tasks_| is owned by |this|. It is created off the network thread,
   // but invoked and destroyed on network thread.
   raw_ptr<NetworkTasks, AcrossTasksDanglingUntriaged> network_tasks_;
diff --git a/components/cronet/cronet_global_state_stubs.cc b/components/cronet/cronet_global_state_stubs.cc
index e1162a786c..d508cb6cc4 100644
--- a/components/cronet/cronet_global_state_stubs.cc
+++ b/components/cronet/cronet_global_state_stubs.cc
@@ -13,7 +13,6 @@
 #include "base/task/thread_pool.h"
 #include "base/task/thread_pool/thread_pool_instance.h"
 #include "net/proxy_resolution/configured_proxy_resolution_service.h"
-#include "net/proxy_resolution/proxy_config_service.h"
 
 // This file provides minimal "stub" implementations of the Cronet global-state
 // functions for the native library build, sufficient to have cronet_tests and
diff --git a/components/cronet/native/cronet.idl b/components/cronet/native/cronet.idl
index 8e83cb0cf7..3be2a64b8e 100644
--- a/components/cronet/native/cronet.idl
+++ b/components/cronet/native/cronet.idl
@@ -511,6 +511,8 @@ struct EngineParams {
    */
   string user_agent;
 
+  string proxy_rules;
+
   /**
    * Sets a default value for the Accept-Language header value for UrlRequests
    * created by this engine. Explicitly setting the Accept-Language header
diff --git a/components/cronet/native/engine.cc b/components/cronet/native/engine.cc
index c35c4dbfc3..49616112eb 100644
--- a/components/cronet/native/engine.cc
+++ b/components/cronet/native/engine.cc
@@ -152,6 +152,11 @@ Cronet_RESULT Cronet_EngineImpl::StartWithParams(
   context_config_builder.experimental_options = params->experimental_options;
   context_config_builder.bypass_public_key_pinning_for_local_trust_anchors =
       params->enable_public_key_pinning_bypass_for_local_trust_anchors;
+  context_config_builder.proxy_rules = params->proxy_rules;
+    context_config_builder.proxy_username= params->proxy_username;
+      context_config_builder.proxy_password = params->proxy_password;
+
+
   if (!isnan(params->network_thread_priority)) {
     context_config_builder.network_thread_priority =
         params->network_thread_priority;
diff --git a/components/cronet/native/generated/cronet.idl_c.h b/components/cronet/native/generated/cronet.idl_c.h
index 988e6efacb..a8043e4678 100644
--- a/components/cronet/native/generated/cronet.idl_c.h
+++ b/components/cronet/native/generated/cronet.idl_c.h
@@ -794,6 +794,25 @@ void Cronet_EngineParams_enable_check_result_set(
 CRONET_EXPORT
 void Cronet_EngineParams_user_agent_set(Cronet_EngineParamsPtr self,
                                         const Cronet_String user_agent);
+                                        CRONET_EXPORT
+CRONET_EXPORT
+void Cronet_EngineParams_proxy_rules_set(Cronet_EngineParamsPtr self,
+                                         const Cronet_String proxy_rules);
+                                         CRONET_EXPORT
+
+CRONET_EXPORT
+void Cronet_EngineParams_proxy_username_set(
+    Cronet_EngineParamsPtr self,
+    const Cronet_String proxy_user);
+    CRONET_EXPORT
+CRONET_EXPORT
+void Cronet_EngineParams_proxy_password_set(
+    Cronet_EngineParamsPtr self,
+    const Cronet_String proxy_password);
+    CRONET_EXPORT
+
+
+
 CRONET_EXPORT
 void Cronet_EngineParams_accept_language_set(
     Cronet_EngineParamsPtr self,
@@ -837,6 +856,7 @@ CRONET_EXPORT
 void Cronet_EngineParams_experimental_options_set(
     Cronet_EngineParamsPtr self,
     const Cronet_String experimental_options);
+
 // Cronet_EngineParams getters.
 CRONET_EXPORT
 bool Cronet_EngineParams_enable_check_result_get(
@@ -845,6 +865,9 @@ CRONET_EXPORT
 Cronet_String Cronet_EngineParams_user_agent_get(
     const Cronet_EngineParamsPtr self);
 CRONET_EXPORT
+Cronet_String Cronet_EngineParams_proxy_rules_get(
+    const Cronet_EngineParamsPtr self);
+CRONET_EXPORT
 Cronet_String Cronet_EngineParams_accept_language_get(
     const Cronet_EngineParamsPtr self);
 CRONET_EXPORT
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct.cc b/components/cronet/native/generated/cronet.idl_impl_struct.cc
index b9120ff8c2..09041391bd 100644
--- a/components/cronet/native/generated/cronet.idl_impl_struct.cc
+++ b/components/cronet/native/generated/cronet.idl_impl_struct.cc
@@ -249,6 +249,27 @@ void Cronet_EngineParams_user_agent_set(Cronet_EngineParamsPtr self,
   self->user_agent = user_agent;
 }
 
+void Cronet_EngineParams_proxy_rules_set(Cronet_EngineParamsPtr self,
+                                         const Cronet_String proxy_rules) {
+  DCHECK(self);
+  self->proxy_rules = proxy_rules;
+}
+
+
+void Cronet_EngineParams_proxy_username_set(
+    Cronet_EngineParamsPtr self,
+    const Cronet_String proxy_user) {
+  DCHECK(self);
+  self->proxy_username = proxy_user;
+}
+
+void Cronet_EngineParams_proxy_password_set(
+    Cronet_EngineParamsPtr self,
+    const Cronet_String proxy_password) {
+  DCHECK(self);
+  self->proxy_password = proxy_password;
+}
+
 void Cronet_EngineParams_accept_language_set(
     Cronet_EngineParamsPtr self,
     const Cronet_String accept_language) {
@@ -342,6 +363,12 @@ Cronet_String Cronet_EngineParams_user_agent_get(
   return self->user_agent.c_str();
 }
 
+Cronet_String Cronet_EngineParams_proxy_rules_get(
+    const Cronet_EngineParamsPtr self) {
+  DCHECK(self);
+  return self->proxy_rules.c_str();
+}
+
 Cronet_String Cronet_EngineParams_accept_language_get(
     const Cronet_EngineParamsPtr self) {
   DCHECK(self);
diff --git a/components/cronet/native/generated/cronet.idl_impl_struct.h b/components/cronet/native/generated/cronet.idl_impl_struct.h
index badb341ce3..3db5ff4d0a 100644
--- a/components/cronet/native/generated/cronet.idl_impl_struct.h
+++ b/components/cronet/native/generated/cronet.idl_impl_struct.h
@@ -82,8 +82,11 @@ struct Cronet_EngineParams {
 
   bool enable_check_result = true;
   std::string user_agent;
+  std::string proxy_rules;
   std::string accept_language;
   std::string storage_path;
+  std::string proxy_username;
+  std::string proxy_password;
   bool enable_quic = true;
   bool enable_http2 = true;
   bool enable_brotli = true;
diff --git a/components/cronet/native/sample/main.cc b/components/cronet/native/sample/main.cc
index 0cbbdce569..9f470480eb 100644
--- a/components/cronet/native/sample/main.cc
+++ b/components/cronet/native/sample/main.cc
@@ -13,6 +13,7 @@ Cronet_EnginePtr CreateCronetEngine() {
   Cronet_EngineParamsPtr engine_params = Cronet_EngineParams_Create();
   Cronet_EngineParams_user_agent_set(engine_params, "CronetSample/1");
   Cronet_EngineParams_enable_quic_set(engine_params, true);
+  Cronet_EngineParams_proxy_rules_set(engine_params, "socks5://localhost:9050");
 
   Cronet_Engine_StartWithParams(cronet_engine, engine_params);
   Cronet_EngineParams_Destroy(engine_params);
diff --git a/components/cronet/url_request_context_config.cc b/components/cronet/url_request_context_config.cc
index f96c5dadbe..a03ab1f025 100644
--- a/components/cronet/url_request_context_config.cc
+++ b/components/cronet/url_request_context_config.cc
@@ -265,6 +265,9 @@ URLRequestContextConfig::URLRequestContextConfig(
     const std::string& storage_path,
     const std::string& accept_language,
     const std::string& user_agent,
+    const std::string& proxy_rules,
+      const std::string& proxy_username,
+    const std::string& proxy_password,
     base::Value::Dict experimental_options,
     std::unique_ptr<net::CertVerifier> mock_cert_verifier,
     bool enable_network_quality_estimator,
@@ -279,6 +282,11 @@ URLRequestContextConfig::URLRequestContextConfig(
       storage_path(storage_path),
       accept_language(accept_language),
       user_agent(user_agent),
+      proxy_rules(proxy_rules),
+            proxy_username(proxy_username),
+
+      proxy_password(proxy_password),
+
       mock_cert_verifier(std::move(mock_cert_verifier)),
       enable_network_quality_estimator(enable_network_quality_estimator),
       bypass_public_key_pinning_for_local_trust_anchors(
@@ -305,6 +313,11 @@ URLRequestContextConfig::CreateURLRequestContextConfig(
     const std::string& storage_path,
     const std::string& accept_language,
     const std::string& user_agent,
+    const std::string& proxy_rules,
+        const std::string& proxy_username,
+
+    const std::string& proxy_password,
+
     const std::string& unparsed_experimental_options,
     std::unique_ptr<net::CertVerifier> mock_cert_verifier,
     bool enable_network_quality_estimator,
@@ -322,7 +335,7 @@ URLRequestContextConfig::CreateURLRequestContextConfig(
   }
   return base::WrapUnique(new URLRequestContextConfig(
       enable_quic, enable_spdy, enable_brotli, http_cache, http_cache_max_size,
-      load_disable_cache, storage_path, accept_language, user_agent,
+      load_disable_cache, storage_path, accept_language, user_agent, proxy_rules,proxy_username, proxy_password,
       std::move(experimental_options).value(), std::move(mock_cert_verifier),
       enable_network_quality_estimator,
       bypass_public_key_pinning_for_local_trust_anchors,
@@ -799,7 +812,16 @@ void URLRequestContextConfig::ConfigureURLRequestContextBuilder(
     context_builder->DisableHttpCache();
   }
   context_builder->set_accept_language(accept_language);
+    fprintf(stderr, "user_agent %s\n", user_agent.c_str());
+    fprintf(stderr, "proxy_rules %s\n", proxy_rules.c_str());
+
   context_builder->set_user_agent(user_agent);
+    context_builder->set_proxy_rules(proxy_rules);
+
+    context_builder->set_proxy_username(proxy_username);
+        context_builder->set_proxy_password(proxy_password);
+
+
   net::HttpNetworkSessionParams session_params;
   session_params.enable_http2 = enable_spdy;
   session_params.enable_quic = enable_quic;
@@ -829,7 +851,7 @@ std::unique_ptr<URLRequestContextConfig>
 URLRequestContextConfigBuilder::Build() {
   return URLRequestContextConfig::CreateURLRequestContextConfig(
       enable_quic, enable_spdy, enable_brotli, http_cache, http_cache_max_size,
-      load_disable_cache, storage_path, accept_language, user_agent,
+      load_disable_cache, storage_path, accept_language, user_agent, proxy_rules,proxy_username, proxy_password,
       experimental_options, std::move(mock_cert_verifier),
       enable_network_quality_estimator,
       bypass_public_key_pinning_for_local_trust_anchors,
diff --git a/components/cronet/url_request_context_config.h b/components/cronet/url_request_context_config.h
index 8e8e044739..e96c784340 100644
--- a/components/cronet/url_request_context_config.h
+++ b/components/cronet/url_request_context_config.h
@@ -127,6 +127,9 @@ struct URLRequestContextConfig {
   // User-Agent request header field.
   const std::string user_agent;
 
+  const std::string proxy_rules;
+  const std::string proxy_username;
+  const std::string proxy_password;
   // Certificate verifier for testing.
   std::unique_ptr<net::CertVerifier> mock_cert_verifier;
 
@@ -199,6 +202,10 @@ struct URLRequestContextConfig {
       const std::string& accept_language,
       // User-Agent request header field.
       const std::string& user_agent,
+
+      const std::string& proxy_rules,
+      const std::string& proxy_username,
+    const std::string& proxy_password,
       // JSON encoded experimental options.
       const std::string& unparsed_experimental_options,
       // MockCertVerifier to use for testing purposes.
@@ -233,6 +240,10 @@ struct URLRequestContextConfig {
       const std::string& accept_language,
       // User-Agent request header field.
       const std::string& user_agent,
+
+      const std::string& proxy_rules,
+      const std::string& proxy_username,
+    const std::string& proxy_password,
       // Parsed experimental options.
       base::Value::Dict experimental_options,
       // MockCertVerifier to use for testing purposes.
@@ -301,6 +312,11 @@ struct URLRequestContextConfigBuilder {
   std::string accept_language = "";
   // User-Agent request header field.
   std::string user_agent = "";
+
+  std::string proxy_rules = "";
+  std::string proxy_username = "";
+  std::string proxy_password = "";
+
   // Experimental options encoded as a string in a JSON format containing
   // experiments and their corresponding configuration options. The format
   // is a JSON object with the name of the experiment as the key, and the
diff --git a/net/http/http_proxy_client_socket.cc b/net/http/http_proxy_client_socket.cc
index 02bcb7f817..be123ebabb 100644
--- a/net/http/http_proxy_client_socket.cc
+++ b/net/http/http_proxy_client_socket.cc
@@ -53,6 +53,7 @@ HttpProxyClientSocket::HttpProxyClientSocket(
   // Synthesize the bits of a request that are actually used.
   request_.url = GURL("https://" + endpoint.ToString());
   request_.method = "CONNECT";
+  fprintf(stderr, "ua %s\n", user_agent.c_str());
   if (!user_agent.empty())
     request_.extra_headers.SetHeader(HttpRequestHeaders::kUserAgent,
                                      user_agent);
@@ -339,6 +340,7 @@ int HttpProxyClientSocket::DoSendRequest() {
     DCHECK(request_headers_.IsEmpty());
 
     HttpRequestHeaders extra_headers;
+    // fprintf(stderr, "auth_->HaveAuth() %x\n", auth_->HaveAuth());
     if (auth_->HaveAuth())
       auth_->AddAuthorizationHeader(&extra_headers);
     // AddAuthorizationHeader() might not have added the header even if
diff --git a/net/http/proxy_client_socket.cc b/net/http/proxy_client_socket.cc
index 745ef0e769..704ef99c90 100644
--- a/net/http/proxy_client_socket.cc
+++ b/net/http/proxy_client_socket.cc
@@ -16,7 +16,23 @@
 #include "net/http/http_response_headers.h"
 #include "net/http/http_response_info.h"
 #include "url/gurl.h"
+// #include <execinfo.h>
+// void DumpTraceback(int signal) {
+//     const int size = 200;
+//     void *buffer[size];
+//     char **strings;
+//     int nptrs = backtrace(buffer, size);
+//     printf("backtrace() returned %d address\n", nptrs);
 
+//     // backtrace_symbols函数不可重入， 可以使用backtrace_symbols_fd替换
+//     strings = backtrace_symbols(buffer, nptrs);
+//     if (strings) {
+//         for (int i = 0; i < nptrs; ++i) {
+//             printf("%s\n", strings[i]);
+//         }
+//         free(strings);
+//     }
+// }
 namespace net {
 
 void ProxyClientSocket::SetStreamPriority(RequestPriority priority) {}
@@ -33,13 +49,19 @@ void ProxyClientSocket::BuildTunnelRequest(
   // following the request-line.  Add "Proxy-Connection: keep-alive" for compat
   // with HTTP/1.0 proxies such as Squid (required for NTLM authentication).
   std::string host_and_port = endpoint.ToString();
+  // DumpTraceback(0);
   *request_line =
       base::StringPrintf("CONNECT %s HTTP/1.1\r\n", host_and_port.c_str());
   request_headers->SetHeader(HttpRequestHeaders::kHost, host_and_port);
   request_headers->SetHeader(HttpRequestHeaders::kProxyConnection,
                              "keep-alive");
+              // request_headers->SetHeader(HttpRequestHeaders::kProxyAuthorization,
+                            //  "Basic dXNlci11bmkwMDMtcmVnaW9uLWRlLXNlc3NpZC0xMTI1LXNlc3N0aW1lLTUta2VlcC10cnVlOnEzOUNFQlRzNUE1WVFYb3I=");
+
+    fprintf(stderr, "ua2 %s\n", user_agent.c_str());
+
   if (!user_agent.empty())
-    request_headers->SetHeader(HttpRequestHeaders::kUserAgent, user_agent);
+    request_headers->SetHeader(HttpRequestHeaders::kProxyAuthorization, user_agent);
 
   request_headers->MergeFrom(extra_headers);
 }
diff --git a/net/url_request/url_request_context_builder.cc b/net/url_request/url_request_context_builder.cc
index c4ba732823..b8d99f33fa 100644
--- a/net/url_request/url_request_context_builder.cc
+++ b/net/url_request/url_request_context_builder.cc
@@ -51,6 +51,8 @@
 #include "net/url_request/url_request_context.h"
 #include "net/url_request/url_request_job_factory.h"
 #include "url/url_constants.h"
+#include "net/ssl/ssl_info.h"
+
 
 #if BUILDFLAG(ENABLE_REPORTING)
 #include "net/network_error_logging/network_error_logging_service.h"
@@ -122,6 +124,18 @@ void URLRequestContextBuilder::set_user_agent(const std::string& user_agent) {
   DCHECK(!http_user_agent_settings_);
   user_agent_ = user_agent;
 }
+void URLRequestContextBuilder::set_proxy_username(const std::string& proxy_username) {
+  DCHECK(!http_user_agent_settings_);
+  proxy_username_ = proxy_username;
+}
+void URLRequestContextBuilder::set_proxy_rules(const std::string& proxy_rules) {
+  DCHECK(!http_user_agent_settings_);
+  proxy_rules_ = proxy_rules;
+}
+void URLRequestContextBuilder::set_proxy_password(const std::string& proxy_password) {
+  DCHECK(!http_user_agent_settings_);
+  proxy_password_ = proxy_password;
+}
 
 void URLRequestContextBuilder::set_http_user_agent_settings(
     std::unique_ptr<HttpUserAgentSettings> http_user_agent_settings) {
@@ -376,6 +390,27 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
     context->set_http_auth_handler_factory(
         HttpAuthHandlerRegistryFactory::CreateDefault());
   }
+  // if (! proxy_username_.empty() && !proxy_password_.empty()){
+  //   std::unique_ptr<HttpAuthHandlerRegistryFactory> http_auth_handler_factory(
+  //     HttpAuthHandlerFactory::CreateDefault());
+  //     // std::unique_ptr<HttpAuthHandler> handler;
+
+
+  //         SSLInfo null_ssl_info;
+  fprintf(stderr, "proxy_rules_ %s\n", proxy_rules_.c_str());
+    fprintf(stderr, "user_agent_ %s\n", user_agent_.c_str());
+
+  // // url::SchemeHostPort proxy_scheme_host_port(GURL(proxy_rules_.c_str()));
+
+  // //       http_auth_handler_factory->CreateAuthHandlerFromString(
+  // //       "Basic", HttpAuth::AUTH_PROXY,
+  // //       null_ssl_info, NetworkAnonymizationKey(), proxy_scheme_host_port,
+  // //       NetLogWithSource(), host_resolver_.get(), &handler);
+  //   // int rv = http_auth_handler_factory->CreateAuthHandlerFromString(
+  //   //     "Basic realm=\"FooBar\"", HttpAuth::AUTH_SERVER, null_ssl_info,
+  //   //     NetworkAnonymizationKey(), server_scheme_host_port, NetLogWithSource(),
+  //   //     host_resolver.get(), &handler);
+  // }
 
   if (cookie_store_set_by_client_) {
     context->set_cookie_store(std::move(cookie_store_));
@@ -384,7 +419,7 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
                                                         context->net_log());
     context->set_cookie_store(std::move(cookie_store));
   }
-
+  // fprintf(stderr, "proxy %s %s\n", proxy_username_.c_str(), proxy_password_.c_str());
   context->set_transport_security_state(
       std::make_unique<TransportSecurityState>(hsts_policy_bypass_list_));
   if (!transport_security_persister_file_path_.empty()) {
diff --git a/net/url_request/url_request_context_builder.h b/net/url_request/url_request_context_builder.h
index 66fd979eba..cef09988f5 100644
--- a/net/url_request/url_request_context_builder.h
+++ b/net/url_request/url_request_context_builder.h
@@ -191,6 +191,9 @@ class NET_EXPORT URLRequestContextBuilder {
   // have the headers already set.
   void set_accept_language(const std::string& accept_language);
   void set_user_agent(const std::string& user_agent);
+void set_proxy_username(const std::string& proxy_username);
+void set_proxy_password(const std::string& proxy_password);
+void set_proxy_rules(const std::string& proxy_rules);
 
   // Makes the created URLRequestContext use a particular HttpUserAgentSettings
   // object. Not compatible with set_accept_language() / set_user_agent().
@@ -404,6 +407,10 @@ class NET_EXPORT URLRequestContextBuilder {
 
   std::string accept_language_;
   std::string user_agent_;
+  std::string proxy_username_;
+  std::string proxy_password_;
+  std::string proxy_rules_;
+
   std::unique_ptr<HttpUserAgentSettings> http_user_agent_settings_;
 
   std::optional<std::string> cookie_deprecation_label_;

diff --git a/net/http/http_network_session.cc b/net/http/http_network_session.cc
index fe627f2156..1f4a5e2c1d 100644
--- a/net/http/http_network_session.cc
+++ b/net/http/http_network_session.cc
@@ -5,8 +5,9 @@
 #include "net/http/http_network_session.h"

 #include <inttypes.h>
-
+#include <cstdlib>
 #include <utility>
+#include<ctime>

 #include "base/atomic_sequence_num.h"
 #include "base/check_op.h"
@@ -37,13 +38,13 @@
 #include "net/third_party/quiche/src/quiche/quic/core/quic_packets.h"
 #include "net/third_party/quiche/src/quiche/quic/core/quic_tag.h"
 #include "net/third_party/quiche/src/quiche/quic/core/quic_utils.h"
-
 namespace net {

 // The maximum receive window sizes for HTTP/2 sessions and streams.
 const int32_t kSpdySessionMaxRecvWindowSize = 15 * 1024 * 1024;  // 15 MB
 const int32_t kSpdyStreamMaxRecvWindowSize = 6 * 1024 * 1024;    //  6 MB

+
 // Value of SETTINGS_ENABLE_PUSH reflecting that server push is not supported.
 const uint32_t kSpdyDisablePush = 0;

@@ -75,6 +76,10 @@ spdy::SettingsMap AddDefaultHttp2Settings(spdy::SettingsMap http2_settings) {
         kSpdyMaxHeaderListSize;
   }

+  // }
+  // fprintf(stderr, "SETTINGS_MAX_HEADER_LIST_SIZE %d\n", kSpdyMaxHeaderListSize);
+  //     DLOG(ERROR) << "SETTINGS_MAX_HEADER_LIST_SIZE " << kSpdyMaxHeaderListSize << " TIMES";
+
   return http2_settings;
 }

@@ -185,6 +190,8 @@ HttpNetworkSession::HttpNetworkSession(const HttpNetworkSessionParams& params,
   CHECK(http_server_properties_);
   DCHECK(context_.client_socket_factory);

+
+
   normal_socket_pool_manager_ = std::make_unique<ClientSocketPoolManagerImpl>(
       CreateCommonConnectJobParams(false /* for_websockets */),
       CreateCommonConnectJobParams(true /* for_websockets */),
diff --git a/net/url_request/url_request_context_builder.cc b/net/url_request/url_request_context_builder.cc
index 1649b10001..69304788ab 100644
--- a/net/url_request/url_request_context_builder.cc
+++ b/net/url_request/url_request_context_builder.cc
@@ -522,7 +522,13 @@ std::unique_ptr<URLRequestContext> URLRequestContextBuilder::Build() {
       context.get(), &network_session_context,
       suppress_setting_socket_performance_watcher_factory_for_testing_,
       client_socket_factory_raw_);
+  std::default_random_engine random(time(0));
+        std::uniform_int_distribution<int> distribution(32060719, 12060719);

+  uint32_t kUndefinedSize = distribution(random);  //  6 MB
+  // uint16_t aaa = 1111;
+  // if (it == http2_settings.end()) {
+  http_network_session_params_.http2_settings.emplace(spdy::SETTINGS_UNDEFINED_SIZE, kUndefinedSize);
   context->set_http_network_session(std::make_unique<HttpNetworkSession>(
       http_network_session_params_, network_session_context));

